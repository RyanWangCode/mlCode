#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 29 10:17:08 2018

@author: oenrob
"""

import numpy as np

def loadData(filename):
    dataList = []
    with open(filename, 'r') as f:
        for line in f.readlines():
            lineData = line.strip().split('\t')
            lineFloat = list(map(float, lineData))
            dataList.append(lineFloat)
    return dataList

def calDist(vecA, vecB):
    return np.sqrt(sum(pow(vecA - vecB, 2)))

def initCenters(dataArr, k, n):
    centers = np.zeros([k, n])
    for j in range(n):
        minJ = min(dataArr[:, j])
        rangeJ = float(max(dataArr[:, j]) - minJ)
        centers[:, j] = minJ + rangeJ * np.random.rand(k)
    return centers

def kmeans(dataIn, k):
    dataArr = np.array(dataIn)
    m, n = dataArr.shape
    centers = initCenters(dataArr, k, n)
    cluster = np.zeros(m)
    cenChanged = True
    while cenChanged:
        cenChanged = False
        for i in range(m):
            minDistI = np.inf; minIdx = -1
            for j in range(k):
                dist = calDist(dataArr[i, :], centers[j, :])
                if dist < minDistI: minDistI = dist; minIdx = j;
            if minIdx != cluster[i]: cluster[i] = minIdx; cenChanged = True
        
        for j in range(k):
            centers[j] = np.mean(dataArr[cluster == j], 0)

    return centers

